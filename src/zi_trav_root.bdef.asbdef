managed implementation in class zbp_i_trav_root unique;
strict ( 2 );

// step 1 Add draft feature at  BO Level
with draft;



define behavior for ZI_TRAV_ROOT alias Travel
// make the Behaviour pool/implementation for travel entity
implementation in class zbp_i_trav_root unique
persistent table /dmo/travel_m

lock master

// step 3 total etag important for draft
total etag LastChangedAt
// authorization control
authorization master ( instance )

// step 2 specify the draft table :
draft table zarmt_trav_draft

etag master LastChangedAt

// with additional save
with additional save
early numbering
{
  create ( precheck );
  update ( precheck );
  delete;

  // dynamic feature control"
  // (features : instance)
  association _booking { create ( features : instance ); with draft; }// this line means booking cannot be created without travel!!!!
  association _attachment { create ( features : instance ); with draft; }

  // DEFINE Internal action for determination (one of the wayo for determination)
  // internal means intended to be consumed within RAP BO.
  // mainly used for reusability within behaviour implementation class
  internal action recalctotalprice;

  //DEFINE DETERMINATION to execute code when booking fee or currency code changes.
  // means we have to give on modify trigger conditions : like whenever create is triggered or
  // modify of field BookingFee, CurrencyCode
  // commenting below because we want to recalculate for both create, edit, delete. not only for create
  //determination calculatetotalprice on modify { create; field BookingFee, CurrencyCode; }
  determination calculatetotalprice on modify { create; field BookingFee, CurrencyCode; }

  // Checking custom business object rules/ validations of our data
  // ex : validate header data on save sequence phase during create, field customer,
  //  begin date, end date is changed
  validation validateheaderdata on save { create; field CustomerId, BeginDate, EndDate; }


  // create a new determination action for validatecustomer

  determine action validatecustomer { validation validateheaderdata; }

  // Adding side effects which informs RAP to reload the total price if booking fee chnages.
  // in the front end : its like a round trip in RAP
  side effects
  {
    field BookingFee affects field TotalPrice;
    determine action validatecustomer executed on field CustomerId affects messages;
  }

  // step 4 adding the draft empty actions
  draft determine action Prepare; //{ validation validateheaderdata; }
  draft action Edit;
  draft action Resume;
  draft action Activate optimized;
  draft action Discard;


  // static feature control:
  field ( readonly ) LastChangedAt, LastChangedBy, CreatedAt, CreatedBy, TravelId,
  TotalPrice;
  field ( mandatory ) AgencyId, CustomerId, BeginDate, EndDate, OverallStatus, BookingFee, CurrencyCode;

  // To create new instances by copying existing ones.
  factory action copytravel [1];


  // non factory action to change the state of the BO intance( ex accept travel or reject travel)
  action ( features : instance ) acceptTravel result [1] $self;
  action ( features : instance ) rejectTravel result [1] $self;


  mapping for /dmo/travel_m
    {
      TravelId      = travel_id;
      AgencyId      = agency_id;
      CustomerId    = customer_id;
      BeginDate     = begin_date;
      EndDate       = end_date;
      BookingFee    = booking_fee;
      TotalPrice    = total_price;
      CurrencyCode  = currency_code;
      CreatedBy     = created_by;
      CreatedAt     = created_at;
      LastChangedBy = last_changed_by;
      LastChangedAt = last_changed_at;
      OverallStatus = overall_status;
      Description   = description;
    }
}


define behavior for ZI_BOOKING alias Booking
// make the Behaviour pool/implementation for Booking entity
implementation in class zbp_i_booking unique
persistent table /dmo/booking_m

// step 1 draft table for booking
draft table zarmt_book_draft


lock dependent by _travel
authorization dependent by _travel
etag master LastChangedAt
early numbering
{
  update;
  delete;

  // step 2 draft : booking draft creates with travel draft
  association _Travel { with draft; }

  // step 4 draft : booking suppl draft creates with travel draft
  association _bookingsuppl { create; with draft; }

  // static feature control:
  field ( readonly ) TravelId, BookingId;
  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;

  // recalculate the total price if a new booking wasn  created/ modified
  determination calculatetotalprice on modify { field FlightPrice, CurrencyCode; }


  // side effects
  side effects
  {
    field FlightPrice affects field _travel.TotalPrice;
    // field CurrencyCode affects field _travel.TotalPrice;
  }


  mapping for /dmo/booking_m
    {
      TravelId      = travel_id;
      BookingId     = booking_id;
      BookingDate   = booking_date;
      CustomerId    = customer_id;
      CarrierId     = carrier_id;
      ConnectionId  = connection_id;
      FlightDate    = flight_date;
      FlightPrice   = flight_price;
      currencyCode  = currency_code;
      BookingStatus = booking_status;
      LastChangedAt = last_changed_at;
    }
}
define behavior for ZI_BOOK_SUPPL alias Booking_Suppl
// make the Behaviour pool/implementation for Booking Supplements entity
implementation in class zbp_i_booking_suppl unique
persistent table /dmo/booksuppl_m

// step 1 draft
draft table zarmt_booksp_d

lock dependent by _travel
authorization dependent by _travel
etag master LastChangedAt
early numbering
{
  update;
  delete;

  // step 2 draft
  association _travel { with draft; }
  association _booking { with draft; }

  // static feature control:
  field ( readonly ) TravelId, BookingId, BookingSupplementId;
  field ( mandatory ) Price, SupplementId;

  mapping for /dmo/booksuppl_m
    {
      TravelId            = travel_id;
      BookingId           = booking_id;
      BookingSupplementId = booking_supplement_id;
      SupplementId        = supplement_id;
      Price               = price;
      CurrencyCode        = currency_code;
      LastChangedAt       = last_changed_at;
    }
}



define behavior for ZI_U_TRAV_ATTACH alias attachment
// make the Behaviour pool/implementation for Booking entity
implementation in class zbp_i_attach unique
persistent table zarm_tab_attch




lock dependent by _travel
authorization dependent by _travel
etag master LastChangedAt
//early numbering

// step 1 draft table for booking
draft table zarmt_attc_draft
{
  update;
  delete;

  // step 2 draft : booking draft creates with travel draft
  association _Travel { with draft; }
  field ( numbering : managed ) id;
  // static feature control:
  field ( readonly ) TravelId, Id;
  //  field ( mandatory ) CarrierId, ConnectionId, FlightDate, BookingStatus;

  //  // recalculate the total price if a new booking wasn  created/ modified
  //  determination calculatetotalprice on modify { field FlightPrice, CurrencyCode; }
  //
  //
  //  // side effects
  //  side effects
  //  {
  //    field FlightPrice affects field _travel.TotalPrice;
  //   // field CurrencyCode affects field _travel.TotalPrice;
  //  }


  mapping for zarm_tab_attch
    {
      TravelId           = travel_id;
      Id                 = id;
      Attachment         = attachment;
      Filename           = filename;
      Filetype           = filetype;
      Memo               = memo;
      LastChangedAt      = last_changed_at;
      LocalCreatedBy     = local_created_by;
      LocalCreatedAt     = local_created_at;
      LocalLastChangedAt = local_last_changed_at;
      LocalLastChangedBy = local_last_changed_by;
    }
}